// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/test/test.proto

package go_micro_srv_test

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Say                  string   `protobuf:"bytes,1,opt,name=say,proto3" json:"say,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be09eee3772da7, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetSay() string {
	if m != nil {
		return m.Say
	}
	return ""
}

type Request struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be09eee3772da7, []int{1}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Response struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be09eee3772da7, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type StreamingRequest struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingRequest) Reset()         { *m = StreamingRequest{} }
func (m *StreamingRequest) String() string { return proto.CompactTextString(m) }
func (*StreamingRequest) ProtoMessage()    {}
func (*StreamingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be09eee3772da7, []int{3}
}

func (m *StreamingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingRequest.Unmarshal(m, b)
}
func (m *StreamingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingRequest.Marshal(b, m, deterministic)
}
func (m *StreamingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingRequest.Merge(m, src)
}
func (m *StreamingRequest) XXX_Size() int {
	return xxx_messageInfo_StreamingRequest.Size(m)
}
func (m *StreamingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingRequest proto.InternalMessageInfo

func (m *StreamingRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type StreamingResponse struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingResponse) Reset()         { *m = StreamingResponse{} }
func (m *StreamingResponse) String() string { return proto.CompactTextString(m) }
func (*StreamingResponse) ProtoMessage()    {}
func (*StreamingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be09eee3772da7, []int{4}
}

func (m *StreamingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingResponse.Unmarshal(m, b)
}
func (m *StreamingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingResponse.Marshal(b, m, deterministic)
}
func (m *StreamingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingResponse.Merge(m, src)
}
func (m *StreamingResponse) XXX_Size() int {
	return xxx_messageInfo_StreamingResponse.Size(m)
}
func (m *StreamingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingResponse proto.InternalMessageInfo

func (m *StreamingResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Ping struct {
	Stroke               int64    `protobuf:"varint,1,opt,name=stroke,proto3" json:"stroke,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be09eee3772da7, []int{5}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetStroke() int64 {
	if m != nil {
		return m.Stroke
	}
	return 0
}

type Pong struct {
	Stroke               int64    `protobuf:"varint,1,opt,name=stroke,proto3" json:"stroke,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_86be09eee3772da7, []int{6}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetStroke() int64 {
	if m != nil {
		return m.Stroke
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "go.micro.srv.test.Message")
	proto.RegisterType((*Request)(nil), "go.micro.srv.test.Request")
	proto.RegisterType((*Response)(nil), "go.micro.srv.test.Response")
	proto.RegisterType((*StreamingRequest)(nil), "go.micro.srv.test.StreamingRequest")
	proto.RegisterType((*StreamingResponse)(nil), "go.micro.srv.test.StreamingResponse")
	proto.RegisterType((*Ping)(nil), "go.micro.srv.test.Ping")
	proto.RegisterType((*Pong)(nil), "go.micro.srv.test.Pong")
}

func init() { proto.RegisterFile("proto/test/test.proto", fileDescriptor_86be09eee3772da7) }

var fileDescriptor_86be09eee3772da7 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0x17, 0x56, 0xbb, 0x79, 0x9f, 0xb6, 0xe0, 0x3f, 0x3a, 0x15, 0x89, 0x3e, 0xd4, 0x97,
	0x38, 0xf4, 0x13, 0xa8, 0xcf, 0x82, 0x54, 0xc1, 0xe7, 0x38, 0x42, 0x28, 0x2e, 0xc9, 0xcc, 0x4d,
	0x05, 0xbf, 0xb0, 0x9f, 0x43, 0x92, 0xa6, 0x20, 0x1a, 0xf7, 0x52, 0xee, 0xe5, 0x77, 0xee, 0xe1,
	0x9c, 0x06, 0xf6, 0x37, 0xce, 0x7a, 0x7b, 0xe5, 0x25, 0xfa, 0xf8, 0xe1, 0x71, 0xa7, 0x73, 0x65,
	0xb9, 0x6e, 0x57, 0xce, 0x72, 0x74, 0x1f, 0x3c, 0x00, 0xb6, 0x80, 0xc9, 0x83, 0x44, 0x14, 0x4a,
	0xd2, 0x19, 0x8c, 0x51, 0x7c, 0x1e, 0x91, 0x33, 0x52, 0xef, 0x36, 0x61, 0x64, 0x27, 0x30, 0x69,
	0xe4, 0x7b, 0x27, 0xd1, 0x53, 0x0a, 0x85, 0x11, 0x5a, 0x26, 0x1a, 0x67, 0x76, 0x0c, 0xd3, 0x46,
	0xe2, 0xc6, 0x1a, 0x8c, 0xc7, 0x1a, 0xd5, 0x70, 0xac, 0x51, 0xb1, 0x1a, 0x66, 0x4f, 0xde, 0x49,
	0xa1, 0x5b, 0xa3, 0x06, 0x97, 0x3d, 0xd8, 0x59, 0xd9, 0xce, 0xf8, 0xa8, 0x1b, 0x37, 0xfd, 0xc2,
	0x2e, 0x61, 0xfe, 0x43, 0x99, 0x0c, 0xf3, 0xd2, 0x53, 0x28, 0x1e, 0x5b, 0xa3, 0xe8, 0x01, 0x94,
	0xe8, 0x9d, 0x7d, 0x93, 0x09, 0xa7, 0x2d, 0x72, 0xfb, 0x3f, 0xbf, 0xfe, 0x22, 0x50, 0x3c, 0x87,
	0x24, 0xb7, 0x50, 0xdc, 0x8b, 0xf5, 0x9a, 0x56, 0xfc, 0xcf, 0x3f, 0xe1, 0x29, 0x6d, 0xb5, 0xc8,
	0xb2, 0x3e, 0x1f, 0x1b, 0xd1, 0x17, 0x28, 0xfb, 0xd8, 0xf4, 0x3c, 0x23, 0xfc, 0xdd, 0xbd, 0xba,
	0xd8, 0x2e, 0x1a, 0x6c, 0x97, 0x84, 0xde, 0xc1, 0x34, 0x94, 0x8c, 0x45, 0x0e, 0x33, 0x57, 0x01,
	0x56, 0x59, 0x60, 0x8d, 0x62, 0xa3, 0x9a, 0x2c, 0xc9, 0x6b, 0x19, 0x5f, 0xfc, 0xe6, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0xb0, 0xb7, 0xde, 0xea, 0x0a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Test service

type TestClient interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Test_StreamClient, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Test_PingPongClient, error)
}

type testClient struct {
	c           client.Client
	serviceName string
}

func NewTestClient(serviceName string, c client.Client) TestClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.test"
	}
	return &testClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *testClient) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Test.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Test_StreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "Test.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &testStreamClient{stream}, nil
}

type Test_StreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type testStreamClient struct {
	stream client.Stream
}

func (x *testStreamClient) Close() error {
	return x.stream.Close()
}

func (x *testStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *testStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *testStreamClient) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) PingPong(ctx context.Context, opts ...client.CallOption) (Test_PingPongClient, error) {
	req := c.c.NewRequest(c.serviceName, "Test.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &testPingPongClient{stream}, nil
}

type Test_PingPongClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type testPingPongClient struct {
	stream client.Stream
}

func (x *testPingPongClient) Close() error {
	return x.stream.Close()
}

func (x *testPingPongClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *testPingPongClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *testPingPongClient) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *testPingPongClient) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Test service

type TestHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Test_StreamStream) error
	PingPong(context.Context, Test_PingPongStream) error
}

func RegisterTestHandler(s server.Server, hdlr TestHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Test{hdlr}, opts...))
}

type Test struct {
	TestHandler
}

func (h *Test) Call(ctx context.Context, in *Request, out *Response) error {
	return h.TestHandler.Call(ctx, in, out)
}

func (h *Test) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TestHandler.Stream(ctx, m, &testStreamStream{stream})
}

type Test_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type testStreamStream struct {
	stream server.Stream
}

func (x *testStreamStream) Close() error {
	return x.stream.Close()
}

func (x *testStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *testStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *testStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *Test) PingPong(ctx context.Context, stream server.Stream) error {
	return h.TestHandler.PingPong(ctx, &testPingPongStream{stream})
}

type Test_PingPongStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type testPingPongStream struct {
	stream server.Stream
}

func (x *testPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *testPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *testPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *testPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *testPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
